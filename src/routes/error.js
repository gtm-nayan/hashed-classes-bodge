/* App.svelte generated by Svelte v3.59.1 */
import {
	SvelteComponent,
	create_slot,
	detach,
	empty,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot_base
} from 'svelte/internal';

const get_error_slot_changes = (dirty) => ({});
const get_error_slot_context = (ctx) => ({ error: /*error*/ ctx[0] });

// (5:39) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(
		default_slot_template,
		ctx,
		/*$$scope*/ ctx[1],
		null
	);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(
									default_slot_template,
									/*$$scope*/ ctx[1],
									dirty,
									null
							  ),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (5:0) {#if error}
function create_if_block(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[2].error;
	const error_slot = create_slot(
		error_slot_template,
		ctx,
		/*$$scope*/ ctx[1],
		get_error_slot_context
	);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						error_slot,
						error_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(
									error_slot_template,
									/*$$scope*/ ctx[1],
									dirty,
									get_error_slot_changes
							  ),
						get_error_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*error*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] =
		if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			try { if_block.c(); } catch (e) { $$}
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let error;

	$$self.$$set = ($$props) => {
		if ('$$scope' in $$props) $$invalidate(1, ($$scope = $$props.$$scope));
	};

	return [error, $$scope, slots];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
